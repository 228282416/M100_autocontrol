#include "zy.h"
using namespace std;
using namespace cv;

const int Follow_Flag = 10;
const double delta = 100;

CvBox2D detection(IplImage* img);
uint8_t getImageFromMemory(Mat &image);

CvBox2D image_processing:: center(int &framecnt)
    {
//  CvCapture* capture = cvCreateCameraCapture(1);
//  CvCapture* capture = cvCreateFileCapture("test1.mp4");
    IplImage img;
//    int framecnt = 0;
    CvBox2D dt;
    CvBox2D result;
    result.center.x = 0;
    result.center.y = 0;
    Mat img0;
cout <<"df;slkdf;lksd;flk;sdkfipsfdipoifpsd;jfskf"<<endl
     <<"sdfj;lksdjf;lkjds;kf;dsjkf;ljds;fljk;dsklf;kds;lf"<<endl
     <<"kjdsflkjdlsjflsdkjflksdjlfkjdslkfjlsdkjflsdkjflkj"<<endl
     <<"lds;fksd;kf;dskl;lfk;dslkf;sdlkf;lkds;flk;sdlkf;sl"<<endl
     <<"*****************************************************"<<endl
     <<"****************************************************"<<endl;
        if(!getImageFromMemory(img0))
        {


            //img=cvQueryFrame(capture);
            img = IplImage(img0);
            //cvShowImage("img_yuantu", &img);

           
           // CvBox2D result;
            cout<<"zy.test,,,,,,,,,,,,,,,,,,,"<<framecnt<<endl;
            if (framecnt >= Follow_Flag)
            {cout <<"ljytest"<<endl;
                double kx = dt.center.x - dt.size.height / 2 - delta / 2;
                double ky = dt.center.y - dt.size.width / 2 - delta / 2;
                if (kx < 0) kx = 0;
                if (ky < 0) ky = 0;
                cvSetImageROI(&img, cvRect(kx, ky, dt.size.height + delta, dt.size.width + delta));
                IplImage *img2 = cvCreateImage(cvGetSize(&img), img.depth, img.nChannels);
                cvCopy(&img, img2, NULL);
                cvResetImageROI(&img);

                result = detection(img2);
                cvReleaseImage(&img2);
                if (result.center.x == -1 && result.center.y == -1)
                {
                    result = detection(&img);
                    dt = result;
                    framecnt = 1;
                }
                else{
                    result.center.x += kx;
                    result.center.y += ky;
                    dt = result;
                    framecnt = 11;
                }
            }
            else{cout <<framecnt<<endl;
                result = detection(&img);
                double dx = dt.center.x;
                double dy = dt.center.y;
                double t = abs(dx - result.center.x) + abs(dy - result.center.y);
                if ((result.center.x == -1 && result.center.y == -1) || t > delta)
                {
                   framecnt = 1;
                }
                else framecnt++;
                dt = result;
                }
            //cout << framecnt << endl;
            //cout << result.center.x << ' ' << result.center.y << endl;


            if (result.center.x != -1 && result.center.y != -1)
            {
                printf("( %d , %d )\n",result.center.x, result.center.y);
                //TarmacSend(result.center.x, result.center.y);
                //cvCircle(&img, Point(result.center.x, result.center.y), 2, CV_RGB(0, 255, 255), 10, 8, 0);
            }


            cvShowImage("img_yuantu", &img);

            cvWaitKey(0);
            cout<<"zy........"<<endl;
        }
    

    return result;

    }
